{"ast":null,"code":"var _jsxFileName = \"/Users/princeshakti/Desktop/project_mern_memories-PART_1_and_2/client/src/components/Form/Form.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useStyles from \"./styles\";\nimport { createPost, updatePost } from \"../../actions/posts\";\nimport StepOne from \"./StepOne\";\nimport StepTwo from \"./StepTwo\";\nimport Final from \"./Final\";\n\nconst Form = ({\n  currentId,\n  setCurrentId\n}) => {\n  const [postData, setPostData] = useState({\n    name: \"\",\n    dob: \"\",\n    location: \"\",\n    team: \"\",\n    gender: \"\",\n    sports: \"\",\n    about: \"\",\n    interests: \"\",\n    profileimg: \"\"\n  });\n  const post = useSelector(state => currentId ? state.posts.find(message => message._id === currentId) : null);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      name: \"\",\n      dob: \"\",\n      location: \"\",\n      team: \"\",\n      gender: \"\",\n      sports: \"\",\n      about: \"\",\n      interests: \"\",\n      profileimg: \"\"\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      dispatch(createPost(postData));\n      clear();\n    } else {\n      dispatch(updatePost(currentId, postData));\n      clear();\n    }\n  };\n\n  const [step, setstep] = useState(1);\n\n  const nextStep = () => {\n    setstep(step + 1);\n  };\n\n  const prevStep = () => {\n    setstep(step - 1);\n  }; // const handleInputData = (input) => (e) => {\n  //   // input value from the form\n  //   const { value } = e.target;\n  //   //updating for data state taking previous state and then adding new value to create new object\n  //   setPostData((prevState) => ({\n  //     ...prevState,\n  //     [input]: value,\n  //   }));\n  // };\n\n\n  switch (step) {\n    // case 1 to show stepOne form and passing nextStep, prevStep, and handleInputData as handleFormData method as prop and also formData as value to the fprm\n    case 1:\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        md: {\n          span: 6,\n          offset: 3\n        },\n        className: \"custom-margin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(StepOne, {\n        nextStep: nextStep,\n        postData: postData,\n        setPostData: setPostData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }\n      })))));\n    // case 2 to show stepTwo form passing nextStep, prevStep, and handleInputData as handleFormData method as prop and also formData as value to the fprm\n\n    case 2:\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        md: {\n          span: 6,\n          offset: 3\n        },\n        className: \"custom-margin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(StepTwo, {\n        nextStep: nextStep,\n        postData: postData,\n        setPostData: setPostData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }\n      })))));\n    // Only formData is passed as prop to show the final value at form submit\n\n    case 3:\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        md: {\n          span: 6,\n          offset: 3\n        },\n        className: \"custom-margin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Final, {\n        postData: postData,\n        setPostData: setPostData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      })))));\n    // return (\n    //   <Paper className={classes.paper}>\n    //     <form\n    //       autoComplete=\"off\"\n    //       noValidate\n    //       className={`${classes.root} ${classes.form}`}\n    //       onSubmit={handleSubmit}\n    //     >\n    //       <Typography variant=\"h6\">\n    //         {currentId ? `Editing \"${post.name}\"` : \"Create a Profile\"}\n    //       </Typography>\n    //       <TextField\n    //         name=\"name\"\n    //         variant=\"outlined\"\n    //         label=\"Name\"\n    //         fullWidth\n    //         value={postData.name}\n    //         onChange={(e) => setPostData({ ...postData, name: e.target.value })}\n    //       />\n    //       <TextField\n    //         name=\"dob\"\n    //         variant=\"outlined\"\n    //         label=\"Date of Birth\"\n    //         fullWidth\n    //         value={postData.dob}\n    //         onChange={(e) => setPostData({ ...postData, dob: e.target.value })}\n    //       />\n    //       <TextField\n    //         name=\"location\"\n    //         variant=\"outlined\"\n    //         label=\"Location\"\n    //         fullWidth\n    //         value={postData.location}\n    //         onChange={(e) =>\n    //           setPostData({ ...postData, location: e.target.value })\n    //         }\n    //       />\n    //       <TextField\n    //         name=\"team\"\n    //         variant=\"outlined\"\n    //         label=\"Team\"\n    //         fullWidth\n    //         value={postData.team}\n    //         onChange={(e) => setPostData({ ...postData, team: e.target.value })}\n    //       />\n    //       <TextField\n    //         name=\"gender\"\n    //         variant=\"outlined\"\n    //         label=\"Gender\"\n    //         fullWidth\n    //         value={postData.gender}\n    //         onChange={(e) => setPostData({ ...postData, gender: e.target.value })}\n    //       />\n    //       <TextField\n    //         name=\"sports\"\n    //         variant=\"outlined\"\n    //         label=\"Sports (coma seperated)\"\n    //         fullWidth\n    //         value={postData.sports}\n    //         onChange={(e) =>\n    //           setPostData({\n    //             ...postData,\n    //             sports: e.target.value.split(\",\"),\n    //           })\n    //         }\n    //       />\n    //       <TextField\n    //         name=\"about\"\n    //         variant=\"outlined\"\n    //         label=\"About\"\n    //         fullWidth\n    //         multiline\n    //         rows={4}\n    //         value={postData.about}\n    //         onChange={(e) => setPostData({ ...postData, about: e.target.value })}\n    //       />\n    //       <TextField\n    //         name=\"interests\"\n    //         variant=\"outlined\"\n    //         label=\"Interest\"\n    //         fullWidth\n    //         value={postData.interests}\n    //         onChange={(e) =>\n    //           setPostData({ ...postData, interests: e.target.value })\n    //         }\n    //       />\n    //       <TextField\n    //         name=\"profileimg\"\n    //         variant=\"outlined\"\n    //         label=\"Profile Image\"\n    //         fullWidth\n    //         value={postData.profileimg}\n    //         onChange={(e) =>\n    //           setPostData({ ...postData, profileimg: e.target.value })\n    //         }\n    //       />\n    //       <Button\n    //         className={classes.buttonSubmit}\n    //         variant=\"contained\"\n    //         color=\"primary\"\n    //         size=\"small\"\n    //         type=\"submit\"\n    //         fullWidth\n    //       >\n    //         Submit\n    //       </Button>\n    //       <Button\n    //         variant=\"contained\"\n    //         color=\"secondary\"\n    //         size=\"small\"\n    //         onClick={clear}\n    //         fullWidth\n    //       >\n    //         Clear\n    //       </Button>\n    //     </form>\n    //   </Paper>\n    // );\n  }\n};\n\nexport default Form;","map":{"version":3,"sources":["/Users/princeshakti/Desktop/project_mern_memories-PART_1_and_2/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","useDispatch","useSelector","useStyles","createPost","updatePost","StepOne","StepTwo","Final","Form","currentId","setCurrentId","postData","setPostData","name","dob","location","team","gender","sports","about","interests","profileimg","post","state","posts","find","message","_id","dispatch","classes","clear","handleSubmit","e","preventDefault","step","setstep","nextStep","prevStep","span","offset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport useStyles from \"./styles\";\nimport { createPost, updatePost } from \"../../actions/posts\";\nimport StepOne from \"./StepOne\";\nimport StepTwo from \"./StepTwo\";\nimport Final from \"./Final\";\n\nconst Form = ({ currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({\n    name: \"\",\n    dob: \"\",\n    location: \"\",\n    team: \"\",\n    gender: \"\",\n    sports: \"\",\n    about: \"\",\n    interests: \"\",\n    profileimg: \"\",\n  });\n  const post = useSelector((state) =>\n    currentId ? state.posts.find((message) => message._id === currentId) : null\n  );\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      name: \"\",\n      dob: \"\",\n      location: \"\",\n      team: \"\",\n      gender: \"\",\n      sports: \"\",\n      about: \"\",\n      interests: \"\",\n      profileimg: \"\",\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      dispatch(createPost(postData));\n      clear();\n    } else {\n      dispatch(updatePost(currentId, postData));\n      clear();\n    }\n  };\n  const [step, setstep] = useState(1);\n  const nextStep = () => {\n    setstep(step + 1);\n  };\n\n  const prevStep = () => {\n    setstep(step - 1);\n  };\n\n  // const handleInputData = (input) => (e) => {\n  //   // input value from the form\n  //   const { value } = e.target;\n\n  //   //updating for data state taking previous state and then adding new value to create new object\n  //   setPostData((prevState) => ({\n  //     ...prevState,\n  //     [input]: value,\n  //   }));\n  // };\n\n  switch (step) {\n    // case 1 to show stepOne form and passing nextStep, prevStep, and handleInputData as handleFormData method as prop and also formData as value to the fprm\n    case 1:\n      return (\n        <div className=\"App\">\n          <div className=\"col\">\n            <div className=\"row\">\n              <div md={{ span: 6, offset: 3 }} className=\"custom-margin\">\n                <StepOne\n                  nextStep={nextStep}\n                  postData={postData}\n                  setPostData={setPostData}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    // case 2 to show stepTwo form passing nextStep, prevStep, and handleInputData as handleFormData method as prop and also formData as value to the fprm\n    case 2:\n      return (\n        <div className=\"App\">\n          <div className=\"col\">\n            <div className=\"row\">\n              <div md={{ span: 6, offset: 3 }} className=\"custom-margin\">\n                <StepTwo\n                  nextStep={nextStep}\n                  postData={postData}\n                  setPostData={setPostData}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    // Only formData is passed as prop to show the final value at form submit\n    case 3:\n      return (\n        <div className=\"App\">\n          <div className=\"col\">\n            <div className=\"row\">\n              <div md={{ span: 6, offset: 3 }} className=\"custom-margin\">\n                <Final postData={postData} setPostData={setPostData} />\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    // return (\n    //   <Paper className={classes.paper}>\n    //     <form\n    //       autoComplete=\"off\"\n    //       noValidate\n    //       className={`${classes.root} ${classes.form}`}\n    //       onSubmit={handleSubmit}\n    //     >\n    //       <Typography variant=\"h6\">\n    //         {currentId ? `Editing \"${post.name}\"` : \"Create a Profile\"}\n    //       </Typography>\n    //       <TextField\n    //         name=\"name\"\n    //         variant=\"outlined\"\n    //         label=\"Name\"\n    //         fullWidth\n    //         value={postData.name}\n    //         onChange={(e) => setPostData({ ...postData, name: e.target.value })}\n    //       />\n    //       <TextField\n    //         name=\"dob\"\n    //         variant=\"outlined\"\n    //         label=\"Date of Birth\"\n    //         fullWidth\n    //         value={postData.dob}\n    //         onChange={(e) => setPostData({ ...postData, dob: e.target.value })}\n    //       />\n    //       <TextField\n    //         name=\"location\"\n    //         variant=\"outlined\"\n    //         label=\"Location\"\n    //         fullWidth\n    //         value={postData.location}\n    //         onChange={(e) =>\n    //           setPostData({ ...postData, location: e.target.value })\n    //         }\n    //       />\n    //       <TextField\n    //         name=\"team\"\n    //         variant=\"outlined\"\n    //         label=\"Team\"\n    //         fullWidth\n    //         value={postData.team}\n    //         onChange={(e) => setPostData({ ...postData, team: e.target.value })}\n    //       />\n    //       <TextField\n    //         name=\"gender\"\n    //         variant=\"outlined\"\n    //         label=\"Gender\"\n    //         fullWidth\n    //         value={postData.gender}\n    //         onChange={(e) => setPostData({ ...postData, gender: e.target.value })}\n    //       />\n    //       <TextField\n    //         name=\"sports\"\n    //         variant=\"outlined\"\n    //         label=\"Sports (coma seperated)\"\n    //         fullWidth\n    //         value={postData.sports}\n    //         onChange={(e) =>\n    //           setPostData({\n    //             ...postData,\n    //             sports: e.target.value.split(\",\"),\n    //           })\n    //         }\n    //       />\n    //       <TextField\n    //         name=\"about\"\n    //         variant=\"outlined\"\n    //         label=\"About\"\n    //         fullWidth\n    //         multiline\n    //         rows={4}\n    //         value={postData.about}\n    //         onChange={(e) => setPostData({ ...postData, about: e.target.value })}\n    //       />\n    //       <TextField\n    //         name=\"interests\"\n    //         variant=\"outlined\"\n    //         label=\"Interest\"\n    //         fullWidth\n    //         value={postData.interests}\n    //         onChange={(e) =>\n    //           setPostData({ ...postData, interests: e.target.value })\n    //         }\n    //       />\n\n    //       <TextField\n    //         name=\"profileimg\"\n    //         variant=\"outlined\"\n    //         label=\"Profile Image\"\n    //         fullWidth\n    //         value={postData.profileimg}\n    //         onChange={(e) =>\n    //           setPostData({ ...postData, profileimg: e.target.value })\n    //         }\n    //       />\n\n    //       <Button\n    //         className={classes.buttonSubmit}\n    //         variant=\"contained\"\n    //         color=\"primary\"\n    //         size=\"small\"\n    //         type=\"submit\"\n    //         fullWidth\n    //       >\n    //         Submit\n    //       </Button>\n    //       <Button\n    //         variant=\"contained\"\n    //         color=\"secondary\"\n    //         size=\"small\"\n    //         onClick={clear}\n    //         fullWidth\n    //       >\n    //         Clear\n    //       </Button>\n    //     </form>\n    //   </Paper>\n    // );\n  }\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}